mixin dropzone (args = { }, defaultArgs = { id: 'dropzone', action: '#', type: 'videos', maxFiles: 10, maxFilesize: 10, addRemoveLinks: true })
  - args = Object.assign(defaultArgs, args)
  div(id=`${args.id}_wrapper`)
  form.form(action='#' method='post' enctype="multipart/form-data")
    .fv-row
      .dropzone(id=args.id)
        .dz-message.needsclick
          i.ki-duotone.ki-file-up.fs-3x.text-primary
            span.path1
            span.path2
          .ms-4
            h3.fs-5.fw-bold.text-gray-900.mb-1 Arrastrar #{args.type == 'images' ? i18n.APP.IMAGES : i18n.APP.VIDEOS} aquí o click para subir
            span.fs-7.fw-semibold.text-gray-400 Subir hasta un máximo de #{args.maxFiles} imagenes a la vez.

  script.
    document.addEventListener("DOMContentLoaded", function () {
      let callbacks = !{JSON.stringify(args.callbacks) || JSON.stringify({})};

      const myDropzone = new Dropzone("##{args.id}", {
        url: "#{args.action}", // Set the url for your upload script location
        paramName: "file", // The name that will be used to transfer the file
        maxFiles: !{args.maxFiles},
        maxFilesize: !{args.maxFilesize}, // MB
        addRemoveLinks: !{args.addRemoveLinks},
        paramName: "file", // The name that will be used to transfer the file
        accept: function(file, done) {
          const type_drop = '#{args.type}';
          if (type_drop == 'images') {
            if (file.type.match(/image\/*/)) {
              done();
            } else {
              done('Solo se permiten imagenes');
            }
          } else if (type_drop == 'videos') {
            if (file.type.match(/video\/*/)) {
              done();
            } else {
              done('Solo se permiten videos');
            }
          }
        },
        transformFile: function (file, done) {
          const myDropZone = this;
          const type_dropzone = '#{args.type}';

          if (type_dropzone == 'images') {
            // Create the image editor overlay
            const editor = document.createElement('div');
            editor.style.position = 'fixed';
            editor.style.left = 0;
            editor.style.right = 0;
            editor.style.top = 0;
            editor.style.bottom = 0;
            editor.style.zIndex = 9999;
            editor.style.backgroundColor = '#000';
            document.body.appendChild(editor);

            // Create confirm button at the top left of the viewport
            const buttonConfirm = document.createElement('button');
            buttonConfirm.classList.add('btn', 'btn-primary');
            buttonConfirm.style.position = 'absolute';
            buttonConfirm.style.left = '10px';
            buttonConfirm.style.top = '10px';
            buttonConfirm.style.zIndex = '9999';
            buttonConfirm.textContent = 'Guardar';
            editor.appendChild(buttonConfirm);

            const buttonCancel = document.createElement('button');
            buttonCancel.classList.add('btn', 'btn-light');
            buttonCancel.style.position = 'absolute';
            buttonCancel.style.right = '10px';
            buttonCancel.style.top = '10px';
            buttonCancel.style.zIndex = '9999';
            buttonCancel.textContent = 'Cancelar';
            editor.appendChild(buttonCancel);

            buttonConfirm.addEventListener('click', function () {
              // Get the canvas with image data from Cropper.js
              var canvas = cropper.getCroppedCanvas({
                //- width: 256,
                //- height: 256
              });
              // Turn the canvas into a Blob (file object without a name)
              canvas.toBlob(function(blob) {
                // Create a new Dropzone file thumbnail
                myDropZone.createThumbnail(
                  blob,
                  myDropZone.options.thumbnailWidth,
                  myDropZone.options.thumbnailHeight,
                  myDropZone.options.thumbnailMethod,
                  false, 
                  function(dataURL) {
                    
                    // Update the Dropzone file thumbnail
                    myDropZone.emit('thumbnail', file, dataURL);
                    // Return the file to Dropzone
                    done(blob);
                    // close modal
                    
                });
              });
              // Remove the editor from the view
              document.body.removeChild(editor);
              
            });

            buttonCancel.addEventListener('click', function () {
              // Remove the editor from the view
              document.body.removeChild(editor);

              // cancel the transformFile function
              myDropZone.removeFile(file);
              
            });

            // Create an image node for Cropper.js
            const image = new Image();
            image.src = URL.createObjectURL(file);
            editor.appendChild(image);
            
            // Create Cropper.js
            const cropper = new Cropper(image, { 
              aspectRatio: NaN,
              viewMode: 1,
              background: false,
              //- modal: true,
              movable: true,
              center: true,
              restore: true,
              responsive: true
            });
          } else {
            done(file);
          }
        }
      });

      myDropzone.on('complete', function (file, response) {
        myDropzone.removeFile(file);
        //- if (callbacks.success && typeof eval(callbacks.success) === 'function') {
        //-   eval(callbacks.success)(file);
        //- }
      });

      myDropzone.on('success', function (file, response) {
        if (callbacks.success && typeof eval(callbacks.success) === 'function') {
          eval(callbacks.success)(file, response);
        }
      });

      myDropzone.on("error", function(file, errorMessage, xhr) {
        // Se ejecuta cuando ocurre un error al cargar el archivo
        console.error(`Error al cargar el archivo ${file.name}:`, errorMessage);
        console.log(file, errorMessage, xhr);
        // Puedes realizar acciones adicionales aquí, como mostrar un mensaje de error
      });
    });
